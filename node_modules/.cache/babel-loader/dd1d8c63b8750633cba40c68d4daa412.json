{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Flatiron Labs & projects/Mod 5 Project/Mod-5-project-frontend/src/components/map.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react'; // import InfoWindow from 'google-map-react';\n// import Marker from './marker.js'\n// import Marker from 'google-maps-react';\n\nimport { InfoWindow, Marker } from 'google-map-react';\nconst array = [{\n  lat: 40.764357,\n  lng: -73.923462\n}, {\n  lat: 40.778790,\n  lng: -73.906588\n}, {\n  lat: 40.744309,\n  lng: -73.941860\n}];\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      lng: null,\n      zoom: 13\n    };\n\n    this.onMarkerClick = event => {\n      console.log(event.target);\n    };\n\n    this.displayMarkers = () => {\n      return array.map((place, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          lat: place.lat,\n          lng: place.lng,\n          label: 'activity',\n          name: 'activity',\n          color: \"blue\",\n          onClick: this.onMarkerClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 14\n          }\n        });\n      });\n    };\n\n    this.mapMarkers = () => {\n      // debugger\n      return array.map(marker => /*#__PURE__*/React.createElement(Marker // key={marker.id}\n      // onClick={onClick}\n      , {\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  componentDidMount() {\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?address='${this.props.activity.address}'&key=AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4`).then(resp => resp.json()).then(data => this.setState({\n      lat: data.results[0].geometry.location.lat,\n      lng: data.results[0].geometry.location.lng\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '50vh',\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, this.state.lat ? /*#__PURE__*/React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4'\n      },\n      defaultCenter: {\n        lat: this.state.lat,\n        lng: this.state.lng\n      },\n      defaultZoom: this.state.zoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, this.mapMarkers(), this.displayMarkers()) : null);\n  }\n\n}\n\nexport default Map; // let geocoder; \n// let addressData = [{location: \"146 Pierrepont St, Brooklyn, NY, USA\"}, {location: \"153 Remsen St, Brooklyn, NY, USA\"}]; \n// class ShelterMap extends Component { \n//   constructor (props) { \n//     super(props); \n//     this.onMarkerClick = this.onMarkerClick.bind(this); \n//     this.displayMarkers = this.displayMarkers.bind(this); \n//     this.state = { \n//         lat: 40.6946768, \n//         lng: -73.99161700000002, \n//         showingInfoWindow: false, \n//         activeMarker: {}, \n//         selectedPlace: {}, \n//         places: [], \n//         stores: [{latitude: 47.49855629475769, longitude: -122.14184416996333}, \n//           {latitude: 47.359423, longitude: -122.021071}, \n//           {latitude: 47.2052192687988, longitude: -121.988426208496}, \n//           {latitude: 47.6307081, longitude: -122.1434325}, \n//           {latitude: 47.3084488, longitude: -122.2140121}, \n//           {latitude: 47.5524695, longitude: -122.0425407}] \n//     } \n//   } \n//   componentDidMount () { \n//     this.plotPoints() \n//   } \n//   plotPoints () { \n//     let locations = this.getPoints(geocoder) \n//     let places = new Array() \n//     Promise.all(locations) \n//       .then(function(returnVals) { \n//         returnVals.forEach(function(latLng) { \n//           let place = {latitude: latLng[0], longitude: latLng[1]} \n//           places.push(place) \n//         }) \n//       }) \n//     this.setState (() => { \n//       return { \n//           places: places \n//       } \n//     }); \n//   } \n//   getPoints(geocoder) { \n//     let locationData = []; \n//     for (let i = 0; i < addressData.length; i++) { \n//       locationData.push(this.findLatLang(addressData[i].location, geocoder)) \n//     } \n//     return locationData // array of promises \n//   } \n//   findLatLang(address, geocoder) { \n//     return new Promise(function(resolve, reject) { \n//       geocoder.geocode({ \n//         'address': address \n//       }, function(results, status) { \n//         if (status === 'OK') { \n//           console.log(results); \n//           resolve([results[0].geometry.location.lat(), results[0].geometry.location.lng()]); \n//         } else { \n//           reject(new Error('Couldnt\\'t find the location ' + address)); \n//         } \n//       }) \n//     }) \n//   } \n//   displayMarkers (stores) { \n//     return stores.map((place, index) => { \n//       return <Marker key={index} id={index} position={{ \n//        lat: place.latitude, \n//        lng: place.longitude \n//      }} \n//      onClick={() => console.log(\"You clicked me!\")} /> \n//     }) \n//   } \n//   onMarkerClick (props, marker, e) { \n//     this.setState({ \n//       selectedPlace: props, \n//       activeMarker: marker, \n//       showingInfoWindow: true \n//     }); \n//   }; \n//   render() { \n//     geocoder = new this.props.google.maps.Geocoder(); \n//     return ( \n//       <div className=\"container place-map\"> \n//         <div className=\"row\"> \n//           <div className=\"col-md-12\"> \n//             <Map \n//               google={this.props.google} \n//               zoom={14} \n//               style={mapStyles} \n//               initialCenter={{ \n//                 lat: this.state.lat, \n//                 lng: this.state.lng \n//               }} \n//               > \n//               {this.displayMarkers(this.state.stores)} \n//               {this.displayMarkers(this.state.places)} \n//               <InfoWindow \n//                 marker={this.state.activeMarker} \n//                 visible={this.state.showingInfoWindow} \n//               > \n//                 <div>Your Location Here!</div> \n//               </InfoWindow> \n//             </Map> \n//           </div> \n//         </div> \n//       </div> \n//     ); \n//   } \n// } \n// export default GoogleApiWrapper({ \n//   apiKey: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4' \n// })(ShelterMap);","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Flatiron Labs & projects/Mod 5 Project/Mod-5-project-frontend/src/components/map.js"],"names":["React","Component","GoogleMapReact","InfoWindow","Marker","array","lat","lng","Map","state","zoom","onMarkerClick","event","console","log","target","displayMarkers","map","place","index","mapMarkers","marker","componentDidMount","fetch","props","activity","address","then","resp","json","data","setState","results","geometry","location","render","height","width","key"],"mappings":"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":["import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\n// import InfoWindow from 'google-map-react';\n// import Marker from './marker.js'\n// import Marker from 'google-maps-react';\nimport {InfoWindow, Marker} from 'google-map-react';\n\n\nconst array = [{ lat: 40.764357, lng: -73.923462}, { lat: 40.778790 , lng: -73.906588}, { lat: 40.744309, lng:  -73.941860}]\n\nclass Map extends Component {\n\n  state = {\n    lat: null,\n    lng: null,\n    zoom: 13,\n  }\n\n  componentDidMount() {\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?address='${this.props.activity.address}'&key=AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4`)\n      .then(resp => resp.json())\n      .then(data => this.setState({\n        lat: data.results[0].geometry.location.lat, lng: data.results[0].geometry.location.lng\n      }))\n  }\n  onMarkerClick = (event) => {\n    console.log(event.target);\n    \n  }\n\n  displayMarkers = () => {\n    return array.map((place, index) => {\n      return <Marker\n        lat={place.lat}\n        lng={place.lng}\n        label={'activity'}\n        name={'activity'}\n        color='blue'\n        onClick={this.onMarkerClick}\n      />\n    })\n  }\n\n  mapMarkers = () => {\n    // debugger\n    return array.map(marker =>\n      <Marker\n        // key={marker.id}\n        // onClick={onClick}\n        position={{ lat: marker.lat, lng: marker.lng }}\n      />\n    )\n  }\n\n  render() {\n\n    return (\n      <div style={{ height: '50vh', width: '100%' }}>\n        {this.state.lat ?\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4' }}\n            defaultCenter={{ lat: this.state.lat, lng: this.state.lng }}\n            defaultZoom={this.state.zoom}\n          >\n            {this.mapMarkers()}\n            {/* <Marker\n              lat={this.state.lat}\n              lng={this.state.lng}\n              name={this.props.activity.name}\n              color='blue'\n              onClick={this.onMarkerClick}\n            /> */}\n            {this.displayMarkers()}\n          </GoogleMapReact>\n          : null}\n\n      </div>\n    );\n  }\n}\n\nexport default Map;\n\n\n\n\n// let geocoder; \n// let addressData = [{location: \"146 Pierrepont St, Brooklyn, NY, USA\"}, {location: \"153 Remsen St, Brooklyn, NY, USA\"}]; \n\n// class ShelterMap extends Component { \n//   constructor (props) { \n//     super(props); \n//     this.onMarkerClick = this.onMarkerClick.bind(this); \n//     this.displayMarkers = this.displayMarkers.bind(this); \n//     this.state = { \n//         lat: 40.6946768, \n//         lng: -73.99161700000002, \n//         showingInfoWindow: false, \n//         activeMarker: {}, \n//         selectedPlace: {}, \n//         places: [], \n//         stores: [{latitude: 47.49855629475769, longitude: -122.14184416996333}, \n//           {latitude: 47.359423, longitude: -122.021071}, \n//           {latitude: 47.2052192687988, longitude: -121.988426208496}, \n//           {latitude: 47.6307081, longitude: -122.1434325}, \n//           {latitude: 47.3084488, longitude: -122.2140121}, \n//           {latitude: 47.5524695, longitude: -122.0425407}] \n//     } \n//   } \n\n//   componentDidMount () { \n//     this.plotPoints() \n//   } \n\n//   plotPoints () { \n//     let locations = this.getPoints(geocoder) \n//     let places = new Array() \n\n//     Promise.all(locations) \n//       .then(function(returnVals) { \n//         returnVals.forEach(function(latLng) { \n//           let place = {latitude: latLng[0], longitude: latLng[1]} \n//           places.push(place) \n//         }) \n//       }) \n//     this.setState (() => { \n//       return { \n//           places: places \n//       } \n//     }); \n//   } \n\n//   getPoints(geocoder) { \n//     let locationData = []; \n//     for (let i = 0; i < addressData.length; i++) { \n//       locationData.push(this.findLatLang(addressData[i].location, geocoder)) \n//     } \n//     return locationData // array of promises \n//   } \n\n//   findLatLang(address, geocoder) { \n//     return new Promise(function(resolve, reject) { \n//       geocoder.geocode({ \n//         'address': address \n//       }, function(results, status) { \n//         if (status === 'OK') { \n//           console.log(results); \n//           resolve([results[0].geometry.location.lat(), results[0].geometry.location.lng()]); \n//         } else { \n//           reject(new Error('Couldnt\\'t find the location ' + address)); \n//         } \n//       }) \n//     }) \n//   } \n\n//   displayMarkers (stores) { \n//     return stores.map((place, index) => { \n//       return <Marker key={index} id={index} position={{ \n//        lat: place.latitude, \n//        lng: place.longitude \n//      }} \n//      onClick={() => console.log(\"You clicked me!\")} /> \n//     }) \n//   } \n\n//   onMarkerClick (props, marker, e) { \n//     this.setState({ \n//       selectedPlace: props, \n//       activeMarker: marker, \n//       showingInfoWindow: true \n//     }); \n//   }; \n\n//   render() { \n//     geocoder = new this.props.google.maps.Geocoder(); \n//     return ( \n//       <div className=\"container place-map\"> \n//         <div className=\"row\"> \n//           <div className=\"col-md-12\"> \n//             <Map \n//               google={this.props.google} \n//               zoom={14} \n//               style={mapStyles} \n//               initialCenter={{ \n//                 lat: this.state.lat, \n//                 lng: this.state.lng \n//               }} \n//               > \n//               {this.displayMarkers(this.state.stores)} \n//               {this.displayMarkers(this.state.places)} \n//               <InfoWindow \n//                 marker={this.state.activeMarker} \n//                 visible={this.state.showingInfoWindow} \n//               > \n//                 <div>Your Location Here!</div> \n//               </InfoWindow> \n//             </Map> \n//           </div> \n//         </div> \n//       </div> \n//     ); \n//   } \n// } \n// export default GoogleApiWrapper({ \n//   apiKey: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4' \n// })(ShelterMap);"]},"metadata":{},"sourceType":"module"}