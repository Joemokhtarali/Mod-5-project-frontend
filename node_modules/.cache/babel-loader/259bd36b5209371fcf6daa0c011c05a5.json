{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatroom.js\";\nimport React from 'react';\nimport Message from './message';\nimport './activityPage.css';\n\nclass Chatroom extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: '',\n      messages: []\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.postMessage = () => {\n      let data = {\n        content: this.state.message,\n        chatroom_id: 1,\n        user_id: 1\n      };\n      fetch('http://localhost:3000/messages', {\n        method: 'Post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(resp => resp.json()).then(response => {\n        if (response.errors) {\n          alert(response.errors);\n        } else {\n          this.setState({\n            messages: [...this.state.messages, response]\n          });\n        }\n      });\n    };\n\n    this.renderMessages = () => {\n      this.state.messages.map(m => /*#__PURE__*/React.createElement(Message, {\n        key: m.id,\n        message: m,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 38\n        }\n      }));\n    };\n\n    this.createChatRoomWebsocketConnection = (event, chatRoomId) => {\n      // Creates the new websocket connection\n      let socket = new WebSocket('ws://localhost:3000/cable'); // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n\n      socket.onopen = function (event) {\n        console.log('WebSocket is connected.');\n        const msg = {\n          command: 'subscribe',\n          identifier: JSON.stringify({\n            id: chatRoomId,\n            channel: 'ChatroomChannel'\n          })\n        };\n        socket.send(JSON.stringify(msg));\n      }; // When the connection is closed, this code is run\n\n\n      socket.onclose = function (event) {\n        console.log('WebSocket is closed.');\n      }; // When a message is received through the websocket, this code is run\n\n\n      socket.onmessage = function (event) {\n        const response = event.data;\n        const msg = JSON.parse(response); // Ignores pings\n\n        if (msg.type === \"ping\") {\n          return;\n        }\n\n        console.log(\"FROM RAILS: \", msg); // Renders any newly created messages onto the page\n\n        if (msg.message) {// renderMessage(msg.message)\n        }\n      }; // When an error occurs through the websocket connection, this code is run printing the error message\n\n\n      socket.onerror = function (error) {\n        console.log('WebSocket Error: ' + error);\n      };\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => this.createChatRoomWebsocketConnection(event, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, \"Chatroom\")), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, \"Map:\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.postMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, \"Mocha:\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.handleChange,\n      name: \"message\",\n      value: this.state.message,\n      placeholder: \"write a message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"Send\")));\n  }\n\n}\n\nexport default Chatroom;\n{\n  /* <div id=\"chat-room-div\">\n             <form id=\"new-message-form\" style=\"display: none\">\n                 <label>New Message: </label><br>\n                 <input type=\"text\">\n                 <button type=\"submit\">Send Message</button>\n                 <br><br>\n             </form>\n             <div id=\"messages-list\">\n              </div>\n         </div> */\n}","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatroom.js"],"names":["React","Message","Chatroom","Component","state","message","messages","handleChange","event","setState","target","name","value","postMessage","data","content","chatroom_id","user_id","fetch","method","headers","body","JSON","stringify","then","resp","json","response","errors","alert","renderMessages","map","m","id","createChatRoomWebsocketConnection","chatRoomId","socket","WebSocket","onopen","console","log","msg","command","identifier","channel","send","onclose","onmessage","parse","type","onerror","error","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Message from './message'\nimport './activityPage.css'\n\nclass Chatroom extends React.Component {\n\n    state = {\n        message: '',\n        messages: []\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    postMessage = () => {\n        let data = { content: this.state.message, chatroom_id: 1, user_id: 1 }\n        fetch('http://localhost:3000/messages', {\n            method: 'Post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(resp => resp.json())\n            .then(response => {\n                if (response.errors) { alert(response.errors) }\n                else {\n                    this.setState({\n                        messages: [...this.state.messages, response]\n                    })\n                }\n            })\n    }\n\n    // componentDidMount() {\n    //     fetch('http://localhost:3000/chatrooms/1').then(resp => resp.json()).then(data => this.setState({ chatroom: data, messages: data.messages }))\n    // }\n\n    renderMessages = () => {\n        this.state.messages.map(m => <Message key={m.id} message={m} />)\n    }\n\n\n    \n     createChatRoomWebsocketConnection = (event, chatRoomId) => {\n    \n        // Creates the new websocket connection\n        let socket = new WebSocket('ws://localhost:3000/cable');\n    \n            // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n            socket.onopen = function(event) {\n                console.log('WebSocket is connected.');\n    \n                const msg = {\n                    command: 'subscribe',\n                    identifier: JSON.stringify({\n                        id: chatRoomId,\n                        channel: 'ChatroomChannel'\n                    }),\n                };\n        \n                socket.send(JSON.stringify(msg));\n            };\n            \n            // When the connection is closed, this code is run\n            socket.onclose = function(event) {\n            console.log('WebSocket is closed.');\n            };\n    \n            // When a message is received through the websocket, this code is run\n            socket.onmessage = function(event) {            \n                const response = event.data;\n                const msg = JSON.parse(response);\n                \n                // Ignores pings\n                if (msg.type === \"ping\") {\n                    return;\n                } \n    \n                console.log(\"FROM RAILS: \", msg);\n                \n                // Renders any newly created messages onto the page\n                if (msg.message) {\n                    // renderMessage(msg.message)\n                }\n                \n              };\n            \n            // When an error occurs through the websocket connection, this code is run printing the error message\n            socket.onerror = function(error) {\n                console.log('WebSocket Error: ' + error);\n            };\n    }\n    \n\n    render() {\n\n        return (\n            <div>\n                <div>\n                    <button onClick={(event) => this.createChatRoomWebsocketConnection(event, 1)} >Chatroom</button>\n                    {/* {this.renderMessages()} */}\n                </div>\n                <h4>Map:</h4>\n                <div className='map'>\n                    <Map />\n                    </div>\n                <form onSubmit={this.postMessage}>\n                    <label>Mocha:</label>\n                    <input onChange={this.handleChange} name='message' value={this.state.message} placeholder='write a message'></input>\n                    <button>Send</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Chatroom\n\n\n{/* <div id=\"chat-room-div\">\n            <form id=\"new-message-form\" style=\"display: none\">\n                <label>New Message: </label><br>\n                <input type=\"text\">\n                <button type=\"submit\">Send Message</button>\n                <br><br>\n            </form>\n            <div id=\"messages-list\">\n\n            </div>\n        </div> */}"]},"metadata":{},"sourceType":"module"}