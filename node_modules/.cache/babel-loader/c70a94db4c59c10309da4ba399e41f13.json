{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatroom.js\";\nimport React from 'react';\nimport Message from './message';\nimport { Button, Input } from '@material-ui/core'; // import { Paper } from '@material-ui/core'\n// import { makeStyles } from '@material-ui/core/styles';\n\nclass Chatroom extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: '',\n      messages: [] // firstTime: true\n\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.postMessage = event => {\n      event.preventDefault();\n      let data = {\n        content: this.state.message,\n        chatroom_id: 1,\n        user_id: 1\n      };\n      console.log('message', data);\n      fetch('http://localhost:3000/messages', {\n        method: 'Post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        this.setState({\n          messages: [...this.state.messages, response]\n        });\n      });\n    };\n\n    this.renderMessages = () => {\n      return this.state.messages.map(m => /*#__PURE__*/React.createElement(Message, {\n        key: m.id,\n        currentUser: this.props.currentUser,\n        message: m,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 45\n        }\n      }));\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/chatrooms/${this.props.chatroom.id}`).then(resp => resp.json()).then(data => this.setState({\n      messages: data.messages\n    })); // Creates the new websocket connection\n\n    let socket = new WebSocket('ws://localhost:3000/cable'); // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n\n    socket.onopen = function (event) {\n      console.log('WebSocket is connected.');\n      const msg = {\n        command: 'subscribe',\n        identifier: JSON.stringify({\n          id: 1,\n          channel: 'ChatroomChannel'\n        })\n      };\n      socket.send(JSON.stringify(msg));\n    }; // When the connection is closed, this code is run\n\n\n    socket.onclose = function (event) {\n      console.log('WebSocket is closed.');\n    }; // When a message is received through the websocket, this code is run\n\n\n    socket.onmessage = function (event) {\n      const response = event.data;\n      const msg = JSON.parse(response); // Ignores pings\n\n      if (msg.type === \"ping\") {\n        return;\n      }\n\n      console.log(\"FROM RAILS: \", msg); // Renders any newly created messages onto the page\n\n      if (msg.message) {}\n    }; // When an error occurs through the websocket connection, this code is run printing the error message\n\n\n    socket.onerror = function (error) {\n      console.log('WebSocket Error: ' + error);\n    };\n  } // }\n\n\n  render() {\n    // console.log(this.props.currentUser);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      id: \"new-message-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, \"New Message: \"), /*#__PURE__*/React.createElement(Input, {\n      onChange: this.handleChange,\n      name: \"message\",\n      value: this.state.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.postMessage,\n      variant: \"contained\",\n      color: \"gray\",\n      style: {\n        position: \"relative\",\n        top: 0,\n        left: 10,\n        width: 90\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, \"Send\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chatbox\",\n      size: \"200px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, this.renderMessages()));\n  }\n\n}\n\nexport default Chatroom;","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatroom.js"],"names":["React","Message","Button","Input","Chatroom","Component","state","message","messages","handleChange","event","setState","target","name","value","postMessage","preventDefault","data","content","chatroom_id","user_id","console","log","fetch","method","headers","body","JSON","stringify","then","response","renderMessages","map","m","id","props","currentUser","componentDidMount","chatroom","resp","json","socket","WebSocket","onopen","msg","command","identifier","channel","send","onclose","onmessage","parse","type","onerror","error","render","position","top","left","width"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Message from './message'\nimport { Button, Input } from '@material-ui/core';\n// import { Paper } from '@material-ui/core'\n// import { makeStyles } from '@material-ui/core/styles';\n\n\n\n\nclass Chatroom extends React.Component {\n\n    state = {\n        message: '',\n        messages: [],\n        // firstTime: true\n    }\n    componentDidMount(){\n        fetch(`http://localhost:3000/chatrooms/${this.props.chatroom.id}`).then(resp => resp.json()).then(data => this.setState({ messages: data.messages }))\n\n            // Creates the new websocket connection\n            let socket = new WebSocket('ws://localhost:3000/cable');\n    \n            // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n            socket.onopen = function (event) {\n                console.log('WebSocket is connected.');\n    \n                const msg = {\n                    command: 'subscribe',\n                    identifier: JSON.stringify({\n                        id: 1,\n                        channel: 'ChatroomChannel'\n                    }),\n                };\n    \n                socket.send(JSON.stringify(msg));\n            };\n    \n            // When the connection is closed, this code is run\n            socket.onclose = function (event) {\n                console.log('WebSocket is closed.');\n            };\n    \n            // When a message is received through the websocket, this code is run\n            socket.onmessage = function (event) {\n                const response = event.data;\n                const msg = JSON.parse(response);\n    \n                // Ignores pings\n                if (msg.type === \"ping\") {\n                    return;\n                }\n    \n                console.log(\"FROM RAILS: \", msg);\n    \n                // Renders any newly created messages onto the page\n                if (msg.message) {\n                   \n                }\n    \n            };\n    \n            // When an error occurs through the websocket connection, this code is run printing the error message\n            socket.onerror = function (error) {\n                console.log('WebSocket Error: ' + error);\n            };\n        }\n    \n    // }\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    postMessage = (event) => {\n        event.preventDefault()\n        let data = { content: this.state.message, chatroom_id: 1, user_id: 1 }\n        console.log('message', data);\n\n        fetch('http://localhost:3000/messages', {\n            method: 'Post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(response => {\n                this.setState({\n                    messages: [...this.state.messages, response]\n                })\n            })\n    }   \n\n    renderMessages = () => {\n        return this.state.messages.map(m => <Message key={m.id} currentUser={this.props.currentUser} message={m} />)\n    }\n\n    \n    render() {\n        // console.log(this.props.currentUser);\n        return (\n            \n            <div>\n                <form id=\"new-message-form\">\n                    <label>New Message: </label>\n                    <Input onChange={this.handleChange} name='message' value={this.state.message} /> \n                    <Button onClick={this.postMessage}variant=\"contained\" color=\"gray\" style={{position: \"relative\", top: 0, left: 10, width: 90}}>Send</Button>\n                </form>\n                <div id='chatbox' size='200px'>\n                    {this.renderMessages()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chatroom"]},"metadata":{},"sourceType":"module"}