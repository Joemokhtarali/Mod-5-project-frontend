{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatRoomTest.js\";\nimport React, { useState, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip'; // import FaceIcon from '@material-ui/icons/Face';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '50px',\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: 'flex',\n    alignItem: 'center'\n  },\n  chatwindow: {\n    width: '100%',\n    height: '300px',\n    padding: '20px'\n  },\n  chatbox: {\n    width: '85%'\n  },\n  button: {\n    width: '15%'\n  }\n}));\nexport default function ChatRoomT(props) {\n  const classes = useStyles();\n  const [textValue, changeTextValue] = React.useState('');\n  const [messages, changeMessages] = React.useState([]);\n  useEffect(() => {\n    console.log('hello world'); // fetch(`http://localhost:3000/chatrooms/${props.chatroom.id}`).then(resp => resp.json()).then(data => changeMessages(data))\n    //     // Creates the new websocket connection\n    //     let socket = new WebSocket('ws://localhost:3000/cable');\n    //     // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n    //     socket.onopen = function (event) {\n    //         console.log('WebSocket is connected.');\n    //         const msg = {\n    //             command: 'subscribe',\n    //             identifier: JSON.stringify({\n    //                 id: 1,\n    //                 channel: 'ChatroomChannel'\n    //             }),\n    //         };\n    //         socket.send(JSON.stringify(msg));\n    //     };\n    //     // When the connection is closed, this code is run\n    //     socket.onclose = function (event) {\n    //         console.log('WebSocket is closed.');\n    //     };\n    //     // When a message is received through the websocket, this code is run\n    //     socket.onmessage = function (event) {\n    //         const response = event.data;\n    //         const msg = JSON.parse(response);\n    //         // Ignores pings\n    //         if (msg.type === \"ping\") {\n    //             return;\n    //         }\n    //         console.log(\"FROM RAILS: \", msg);\n    //         // Renders any newly created messages onto the page\n    //         if (msg.message) {\n    //         }\n    //     };\n    //     // When an error occurs through the websocket connection, this code is run printing the error message\n    //     socket.onerror = function (error) {\n    //         console.log('WebSocket Error: ' + error);\n    //     };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Chat Room\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chatwindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, [{\n    from: 'Mocha',\n    msg: 'hello'\n  }].map((chat, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    label: chat.from,\n    className: classes.chip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 41\n    }\n  }, \" \", chat.msg, \" \")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-multiline-flexible\",\n    label: \"Send a message\",\n    className: classes.chatbox,\n    value: textValue,\n    onChange: e => changeTextValue(e.target.value) // multiline\n    // rowsMax={4}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, \"Send\"))));\n}","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatRoomTest.js"],"names":["React","useState","useEffect","Paper","Typography","makeStyles","List","ListItem","ListItemText","Chip","Button","TextField","useStyles","theme","root","margin","padding","spacing","flex","display","alignItem","chatwindow","width","height","chatbox","button","ChatRoomT","props","classes","textValue","changeTextValue","messages","changeMessages","console","log","from","msg","map","chat","i","chip","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip';\n// import FaceIcon from '@material-ui/icons/Face';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: '50px',\n        padding: theme.spacing(3, 2)\n    },\n    flex: {\n        display: 'flex',\n        alignItem: 'center'\n    },\n    chatwindow: {\n        width: '100%',\n        height: '300px',\n        padding: '20px'\n    },\n    chatbox: {\n        width: '85%'\n    },\n    button: {\n        width: '15%'\n    },\n}));\n\nexport default function ChatRoomT(props) {\n    const classes = useStyles();\n\n    const [textValue, changeTextValue] = React.useState('')\n    const [messages, changeMessages] = React.useState([])\n\n    useEffect(() => {\n        console.log('hello world');\n        \n        // fetch(`http://localhost:3000/chatrooms/${props.chatroom.id}`).then(resp => resp.json()).then(data => changeMessages(data))\n\n        //     // Creates the new websocket connection\n        //     let socket = new WebSocket('ws://localhost:3000/cable');\n    \n        //     // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n        //     socket.onopen = function (event) {\n        //         console.log('WebSocket is connected.');\n    \n        //         const msg = {\n        //             command: 'subscribe',\n        //             identifier: JSON.stringify({\n        //                 id: 1,\n        //                 channel: 'ChatroomChannel'\n        //             }),\n        //         };\n    \n        //         socket.send(JSON.stringify(msg));\n        //     };\n    \n        //     // When the connection is closed, this code is run\n        //     socket.onclose = function (event) {\n        //         console.log('WebSocket is closed.');\n        //     };\n    \n        //     // When a message is received through the websocket, this code is run\n        //     socket.onmessage = function (event) {\n        //         const response = event.data;\n        //         const msg = JSON.parse(response);\n    \n        //         // Ignores pings\n        //         if (msg.type === \"ping\") {\n        //             return;\n        //         }\n    \n        //         console.log(\"FROM RAILS: \", msg);\n    \n        //         // Renders any newly created messages onto the page\n        //         if (msg.message) {\n                   \n        //         }\n    \n        //     };\n    \n        //     // When an error occurs through the websocket connection, this code is run printing the error message\n        //     socket.onerror = function (error) {\n        //         console.log('WebSocket Error: ' + error);\n        //     };\n\n    }, []);\n\n    return (\n        <div>\n            <Paper className={classes.root}>\n                <Typography variant='h5' component='h5'>\n                    Chat Room\n                </Typography>\n                {/* <Typography component='p'>\n                    PP\n                </Typography> */}\n                <div className={classes.flex}>\n                    <div className={classes.chatwindow}>\n                        <List>\n                            {\n                                [{ from: 'Mocha', msg: 'hello' }].map((chat, i) => (\n                                    <div className={classes.flex} key={i}>\n                                        <Chip label={chat.from} className={classes.chip} />\n                                        <Typography variant='p'> {chat.msg} </Typography>\n                                    </div>\n                                ))\n                            }\n\n                        </List>\n                    </div>\n                </div>\n                <div className={classes.flex}>\n                    <TextField\n                        id=\"standard-multiline-flexible\"\n                        label=\"Send a message\"\n                        className={classes.chatbox}\n                        value={textValue}\n                        onChange={e => changeTextValue(e.target.value)}\n                    // multiline\n                    // rowsMax={4}\n                    />\n\n                    <Button variant=\"contained\" color=\"primary\">\n                        Send\n                    </Button>\n\n                    {/* <div className={classes.chatbox}>\n\n                    </div>\n                    <div className={classes.button}>\n                       \n                    </div> */}\n                </div>\n            </Paper>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}