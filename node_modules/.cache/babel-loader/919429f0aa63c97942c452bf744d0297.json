{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Flatiron Labs & projects/Mod 5 Project/Mod-5-project-frontend/src/components/map.js\";\n// import React, { Component } from 'react';\n// import GoogleMapReact from 'google-map-react';\n// import Marker from './marker.js'\n// const array = [{ lat: -73.923462, lng: 40.764357 }, { lat: 73.906588, lng: 40.778790 }, { lat: -73.941860, lng: 40.744309 }]\n// class Map extends Component {\n//   state = {\n//     lat: null,\n//     lng: null,\n//     zoom: 13,\n//   }\n//   componentDidMount() {\n//     fetch(`https://maps.googleapis.com/maps/api/geocode/json?address='${this.props.activity.address}'&key=AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4`)\n//       .then(resp => resp.json())\n//       .then(data => this.setState({\n//         lat: data.results[0].geometry.location.lat, lng: data.results[0].geometry.location.lng\n//       }))\n//   }\n//   mapMarkers = () => {\n//     // debugger\n//     return array.map(marker =>\n//       <Marker\n//         // key={marker.id}\n//         // onClick={onClick}\n//         position={{ lat: marker.lat, lng: marker.lng }}\n//       />\n//     )\n//   }\n//   render() {\n//     return (\n//       <div style={{ height: '50vh', width: '100%' }}>\n//         {this.state.lat ?\n//           <GoogleMapReact\n//             bootstrapURLKeys={{ key: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4' }}\n//             defaultCenter={{ lat: this.state.lat, lng: this.state.lng }}\n//             defaultZoom={this.state.zoom}\n//           >\n//             {this.mapMarkers()}\n//             {/* <Marker\n//               lat={this.state.lat}\n//               lng={this.state.lng}\n//               name={this.props.activity.name}\n//               color='blue'\n//               onClick={this.onMarkerClick}\n//             /> */}\n//             {this.mapMarkers()}\n//           </GoogleMapReact>\n//           : null}\n//       </div>\n//     );\n//   }\n// }\n// export default Map;\nimport React, { Component } from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-map-react';\nconst mapStyles = {\n  width: '100%',\n  height: '300px'\n};\nlet geocoder;\nlet addressData = [{\n  location: \"146 Pierrepont St, Brooklyn, NY, USA\"\n}, {\n  location: \"153 Remsen St, Brooklyn, NY, USA\"\n}];\n\nclass ShelterMap extends Component {\n  constructor(props) {\n    super(props);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.displayMarkers = this.displayMarkers.bind(this);\n    this.state = {\n      lat: 40.6946768,\n      lng: -73.99161700000002,\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      places: [],\n      stores: [{\n        latitude: 47.49855629475769,\n        longitude: -122.14184416996333\n      }, {\n        latitude: 47.359423,\n        longitude: -122.021071\n      }, {\n        latitude: 47.2052192687988,\n        longitude: -121.988426208496\n      }, {\n        latitude: 47.6307081,\n        longitude: -122.1434325\n      }, {\n        latitude: 47.3084488,\n        longitude: -122.2140121\n      }, {\n        latitude: 47.5524695,\n        longitude: -122.0425407\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.plotPoints();\n  }\n\n  plotPoints() {\n    let locations = this.getPoints(geocoder);\n    let places = new Array();\n    Promise.all(locations).then(function (returnVals) {\n      returnVals.forEach(function (latLng) {\n        let place = {\n          latitude: latLng[0],\n          longitude: latLng[1]\n        };\n        places.push(place);\n      });\n    });\n    this.setState(() => {\n      return {\n        places: places\n      };\n    });\n  }\n\n  getPoints(geocoder) {\n    let locationData = [];\n\n    for (let i = 0; i < addressData.length; i++) {\n      locationData.push(this.findLatLang(addressData[i].location, geocoder));\n    }\n\n    return locationData; // array of promises \n  }\n\n  findLatLang(address, geocoder) {\n    return new Promise(function (resolve, reject) {\n      geocoder.geocode({\n        'address': address\n      }, function (results, status) {\n        if (status === 'OK') {\n          console.log(results);\n          resolve([results[0].geometry.location.lat(), results[0].geometry.location.lng()]);\n        } else {\n          reject(new Error('Couldnt\\'t find the location ' + address));\n        }\n      });\n    });\n  }\n\n  displayMarkers(stores) {\n    return stores.map((place, index) => {\n      return /*#__PURE__*/React.createElement(Marker, {\n        key: index,\n        id: index,\n        position: {\n          lat: place.latitude,\n          lng: place.longitude\n        },\n        onClick: () => console.log(\"You clicked me!\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 14\n        }\n      });\n    });\n  }\n\n  onMarkerClick(props, marker, e) {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  }\n\n  render() {\n    geocoder = new this.props.google.maps.Geocoder();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container place-map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: this.state.lat,\n        lng: this.state.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, this.displayMarkers(this.state.stores), this.displayMarkers(this.state.places), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, \"Your Location Here!\"))))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4'\n})(ShelterMap);","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Flatiron Labs & projects/Mod 5 Project/Mod-5-project-frontend/src/components/map.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","mapStyles","width","height","geocoder","addressData","location","ShelterMap","constructor","props","onMarkerClick","bind","displayMarkers","state","lat","lng","showingInfoWindow","activeMarker","selectedPlace","places","stores","latitude","longitude","componentDidMount","plotPoints","locations","getPoints","Array","Promise","all","then","returnVals","forEach","latLng","place","push","setState","locationData","i","length","findLatLang","address","resolve","reject","geocode","results","status","console","log","geometry","Error","map","index","marker","e","render","google","maps","Geocoder","apiKey"],"mappings":";AAAA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,GAAR,EAAaC,UAAb,EAAyBC,MAAzB,EAAiCC,gBAAjC,QAAwD,kBAAxD;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,MADS;AAEhBC,EAAAA,MAAM,EAAE;AAFQ,CAAlB;AAKA,IAAIC,QAAJ;AACA,IAAIC,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAD,EAAqD;AAACA,EAAAA,QAAQ,EAAE;AAAX,CAArD,CAAlB;;AAEA,MAAMC,UAAN,SAAyBX,SAAzB,CAAmC;AACjCY,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,UADI;AAETC,MAAAA,GAAG,EAAE,CAAC,iBAFG;AAGTC,MAAAA,iBAAiB,EAAE,KAHV;AAITC,MAAAA,YAAY,EAAE,EAJL;AAKTC,MAAAA,aAAa,EAAE,EALN;AAMTC,MAAAA,MAAM,EAAE,EANC;AAOTC,MAAAA,MAAM,EAAE,CAAC;AAACC,QAAAA,QAAQ,EAAE,iBAAX;AAA8BC,QAAAA,SAAS,EAAE,CAAC;AAA1C,OAAD,EACN;AAACD,QAAAA,QAAQ,EAAE,SAAX;AAAsBC,QAAAA,SAAS,EAAE,CAAC;AAAlC,OADM,EAEN;AAACD,QAAAA,QAAQ,EAAE,gBAAX;AAA6BC,QAAAA,SAAS,EAAE,CAAC;AAAzC,OAFM,EAGN;AAACD,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,SAAS,EAAE,CAAC;AAAnC,OAHM,EAIN;AAACD,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,SAAS,EAAE,CAAC;AAAnC,OAJM,EAKN;AAACD,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,SAAS,EAAE,CAAC;AAAnC,OALM;AAPC,KAAb;AAcD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnB,SAAKC,UAAL;AACD;;AAEDA,EAAAA,UAAU,GAAI;AACZ,QAAIC,SAAS,GAAG,KAAKC,SAAL,CAAetB,QAAf,CAAhB;AACA,QAAIe,MAAM,GAAG,IAAIQ,KAAJ,EAAb;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EACGK,IADH,CACQ,UAASC,UAAT,EAAqB;AACzBA,MAAAA,UAAU,CAACC,OAAX,CAAmB,UAASC,MAAT,EAAiB;AAClC,YAAIC,KAAK,GAAG;AAACb,UAAAA,QAAQ,EAAEY,MAAM,CAAC,CAAD,CAAjB;AAAsBX,UAAAA,SAAS,EAAEW,MAAM,CAAC,CAAD;AAAvC,SAAZ;AACAd,QAAAA,MAAM,CAACgB,IAAP,CAAYD,KAAZ;AACD,OAHD;AAID,KANH;AAOA,SAAKE,QAAL,CAAe,MAAM;AACnB,aAAO;AACHjB,QAAAA,MAAM,EAAEA;AADL,OAAP;AAGD,KAJD;AAKD;;AAEDO,EAAAA,SAAS,CAACtB,QAAD,EAAW;AAClB,QAAIiC,YAAY,GAAG,EAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjC,WAAW,CAACkC,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CD,MAAAA,YAAY,CAACF,IAAb,CAAkB,KAAKK,WAAL,CAAiBnC,WAAW,CAACiC,CAAD,CAAX,CAAehC,QAAhC,EAA0CF,QAA1C,CAAlB;AACD;;AACD,WAAOiC,YAAP,CALkB,CAKE;AACrB;;AAEDG,EAAAA,WAAW,CAACC,OAAD,EAAUrC,QAAV,EAAoB;AAC7B,WAAO,IAAIwB,OAAJ,CAAY,UAASc,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CvC,MAAAA,QAAQ,CAACwC,OAAT,CAAiB;AACf,mBAAWH;AADI,OAAjB,EAEG,UAASI,OAAT,EAAkBC,MAAlB,EAA0B;AAC3B,YAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAH,UAAAA,OAAO,CAAC,CAACG,OAAO,CAAC,CAAD,CAAP,CAAWI,QAAX,CAAoB3C,QAApB,CAA6BQ,GAA7B,EAAD,EAAqC+B,OAAO,CAAC,CAAD,CAAP,CAAWI,QAAX,CAAoB3C,QAApB,CAA6BS,GAA7B,EAArC,CAAD,CAAP;AACD,SAHD,MAGO;AACL4B,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,kCAAkCT,OAA5C,CAAD,CAAN;AACD;AACF,OATD;AAUD,KAXM,CAAP;AAYD;;AAED7B,EAAAA,cAAc,CAAEQ,MAAF,EAAU;AACtB,WAAOA,MAAM,CAAC+B,GAAP,CAAW,CAACjB,KAAD,EAAQkB,KAAR,KAAkB;AAClC,0BAAO,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,KAAb;AAAoB,QAAA,EAAE,EAAEA,KAAxB;AAA+B,QAAA,QAAQ,EAAE;AAC/CtC,UAAAA,GAAG,EAAEoB,KAAK,CAACb,QADoC;AAE/CN,UAAAA,GAAG,EAAEmB,KAAK,CAACZ;AAFoC,SAAzC;AAIR,QAAA,OAAO,EAAE,MAAMyB,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAKD,KANM,CAAP;AAOD;;AAEDtC,EAAAA,aAAa,CAAED,KAAF,EAAS4C,MAAT,EAAiBC,CAAjB,EAAoB;AAC/B,SAAKlB,QAAL,CAAc;AACZlB,MAAAA,aAAa,EAAET,KADH;AAEZQ,MAAAA,YAAY,EAAEoC,MAFF;AAGZrC,MAAAA,iBAAiB,EAAE;AAHP,KAAd;AAKD;;AAEDuC,EAAAA,MAAM,GAAG;AACPnD,IAAAA,QAAQ,GAAG,IAAI,KAAKK,KAAL,CAAW+C,MAAX,CAAkBC,IAAlB,CAAuBC,QAA3B,EAAX;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AACE,MAAA,MAAM,EAAE,KAAKjD,KAAL,CAAW+C,MADrB;AAEE,MAAA,IAAI,EAAE,EAFR;AAGE,MAAA,KAAK,EAAEvD,SAHT;AAIE,MAAA,aAAa,EAAE;AACba,QAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADH;AAEbC,QAAAA,GAAG,EAAE,KAAKF,KAAL,CAAWE;AAFH,OAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASG,KAAKH,cAAL,CAAoB,KAAKC,KAAL,CAAWO,MAA/B,CATH,EAUG,KAAKR,cAAL,CAAoB,KAAKC,KAAL,CAAWM,MAA/B,CAVH,eAWE,oBAAC,UAAD;AACE,MAAA,MAAM,EAAE,KAAKN,KAAL,CAAWI,YADrB;AAEE,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWG,iBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAJF,CAXF,CADF,CADF,CADF,CADF;AA0BD;;AAhHgC;;AAkHnC,eAAehB,gBAAgB,CAAC;AAC9B2D,EAAAA,MAAM,EAAE;AADsB,CAAD,CAAhB,CAEZpD,UAFY,CAAf","sourcesContent":["// import React, { Component } from 'react';\n// import GoogleMapReact from 'google-map-react';\n// import Marker from './marker.js'\n\n\n// const array = [{ lat: -73.923462, lng: 40.764357 }, { lat: 73.906588, lng: 40.778790 }, { lat: -73.941860, lng: 40.744309 }]\n\n// class Map extends Component {\n\n//   state = {\n//     lat: null,\n//     lng: null,\n//     zoom: 13,\n//   }\n\n//   componentDidMount() {\n//     fetch(`https://maps.googleapis.com/maps/api/geocode/json?address='${this.props.activity.address}'&key=AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4`)\n//       .then(resp => resp.json())\n//       .then(data => this.setState({\n//         lat: data.results[0].geometry.location.lat, lng: data.results[0].geometry.location.lng\n//       }))\n//   }\n\n\n\n//   mapMarkers = () => {\n//     // debugger\n//     return array.map(marker =>\n//       <Marker\n//         // key={marker.id}\n//         // onClick={onClick}\n//         position={{ lat: marker.lat, lng: marker.lng }}\n//       />\n//     )\n//   }\n\n//   render() {\n\n//     return (\n//       <div style={{ height: '50vh', width: '100%' }}>\n//         {this.state.lat ?\n//           <GoogleMapReact\n//             bootstrapURLKeys={{ key: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4' }}\n//             defaultCenter={{ lat: this.state.lat, lng: this.state.lng }}\n//             defaultZoom={this.state.zoom}\n//           >\n//             {this.mapMarkers()}\n//             {/* <Marker\n//               lat={this.state.lat}\n//               lng={this.state.lng}\n//               name={this.props.activity.name}\n//               color='blue'\n//               onClick={this.onMarkerClick}\n//             /> */}\n//             {this.mapMarkers()}\n//           </GoogleMapReact>\n//           : null}\n\n//       </div>\n//     );\n//   }\n// }\n\n// export default Map;\n\n\n\nimport React, { Component } from 'react'; \nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-map-react'; \n \nconst mapStyles = { \n  width: '100%', \n  height: '300px' \n}; \n \nlet geocoder; \nlet addressData = [{location: \"146 Pierrepont St, Brooklyn, NY, USA\"}, {location: \"153 Remsen St, Brooklyn, NY, USA\"}]; \n \nclass ShelterMap extends Component { \n  constructor (props) { \n    super(props); \n    this.onMarkerClick = this.onMarkerClick.bind(this); \n    this.displayMarkers = this.displayMarkers.bind(this); \n    this.state = { \n        lat: 40.6946768, \n        lng: -73.99161700000002, \n        showingInfoWindow: false, \n        activeMarker: {}, \n        selectedPlace: {}, \n        places: [], \n        stores: [{latitude: 47.49855629475769, longitude: -122.14184416996333}, \n          {latitude: 47.359423, longitude: -122.021071}, \n          {latitude: 47.2052192687988, longitude: -121.988426208496}, \n          {latitude: 47.6307081, longitude: -122.1434325}, \n          {latitude: 47.3084488, longitude: -122.2140121}, \n          {latitude: 47.5524695, longitude: -122.0425407}] \n    } \n  } \n \n  componentDidMount () { \n    this.plotPoints() \n  } \n \n  plotPoints () { \n    let locations = this.getPoints(geocoder) \n    let places = new Array() \n \n    Promise.all(locations) \n      .then(function(returnVals) { \n        returnVals.forEach(function(latLng) { \n          let place = {latitude: latLng[0], longitude: latLng[1]} \n          places.push(place) \n        }) \n      }) \n    this.setState (() => { \n      return { \n          places: places \n      } \n    }); \n  } \n \n  getPoints(geocoder) { \n    let locationData = []; \n    for (let i = 0; i < addressData.length; i++) { \n      locationData.push(this.findLatLang(addressData[i].location, geocoder)) \n    } \n    return locationData // array of promises \n  } \n \n  findLatLang(address, geocoder) { \n    return new Promise(function(resolve, reject) { \n      geocoder.geocode({ \n        'address': address \n      }, function(results, status) { \n        if (status === 'OK') { \n          console.log(results); \n          resolve([results[0].geometry.location.lat(), results[0].geometry.location.lng()]); \n        } else { \n          reject(new Error('Couldnt\\'t find the location ' + address)); \n        } \n      }) \n    }) \n  } \n \n  displayMarkers (stores) { \n    return stores.map((place, index) => { \n      return <Marker key={index} id={index} position={{ \n       lat: place.latitude, \n       lng: place.longitude \n     }} \n     onClick={() => console.log(\"You clicked me!\")} /> \n    }) \n  } \n \n  onMarkerClick (props, marker, e) { \n    this.setState({ \n      selectedPlace: props, \n      activeMarker: marker, \n      showingInfoWindow: true \n    }); \n  }; \n \n  render() { \n    geocoder = new this.props.google.maps.Geocoder(); \n    return ( \n      <div className=\"container place-map\"> \n        <div className=\"row\"> \n          <div className=\"col-md-12\"> \n            <Map \n              google={this.props.google} \n              zoom={14} \n              style={mapStyles} \n              initialCenter={{ \n                lat: this.state.lat, \n                lng: this.state.lng \n              }} \n              > \n              {this.displayMarkers(this.state.stores)} \n              {this.displayMarkers(this.state.places)} \n              <InfoWindow \n                marker={this.state.activeMarker} \n                visible={this.state.showingInfoWindow} \n              > \n                <div>Your Location Here!</div> \n              </InfoWindow> \n            </Map> \n          </div> \n        </div> \n      </div> \n    ); \n  } \n} \nexport default GoogleApiWrapper({ \n  apiKey: 'AIzaSyD4X3Xez83U_L3WZm6Fny8zsSxN_G4s1a4' \n})(ShelterMap);"]},"metadata":{},"sourceType":"module"}