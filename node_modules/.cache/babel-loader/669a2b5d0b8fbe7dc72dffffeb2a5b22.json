{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatRoomTest.js\";\nimport React, { useState, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Avatar from '@material-ui/core/Avatar';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '50px',\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  chatwindow: {\n    width: '100%',\n    height: '300px',\n    padding: '20px',\n    overflow: 'auto'\n  },\n  chatbox: {\n    width: '85%'\n  },\n  button: {\n    width: '15%'\n  },\n  avatars: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nfunction useMergeState(initialState) {\n  const [state, setState] = useState(initialState);\n\n  const setMergedState = newState => setState(prevState => Object.assign({}, prevState, newState));\n\n  return [state, setMergedState];\n}\n\nexport default function ChatRoomT(props) {\n  const classes = useStyles();\n  const [userRequest, setUserRequest] = useMergeState({\n    chatroom: {},\n    messages: []\n  });\n  const [textValue, changeTextValue] = React.useState('');\n  useEffect(() => {\n    fetch(`http://localhost:3000/chatrooms/${props.chatroom.id}`).then(resp => resp.json()).then(data => setUserRequest({\n      chatroom: data,\n      messages: data.messages\n    })); //{changeChatroom(data) && changeMessages(data.messages)})\n    // Creates the new websocket connection\n\n    let socket = new WebSocket('ws://localhost:3000/cable'); // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n\n    socket.onopen = function (event) {\n      console.log('WebSocket is connected.');\n      const msg = {\n        command: 'subscribe',\n        identifier: JSON.stringify({\n          id: 1,\n          channel: 'ChatroomChannel'\n        })\n      };\n      socket.send(JSON.stringify(msg));\n    }; // When the connection is closed, this code is run\n\n\n    socket.onclose = function (event) {\n      console.log('WebSocket is closed.');\n    }; // When a message is received through the websocket, this code is run\n\n\n    socket.onmessage = function (event) {\n      const response = event.data;\n      const msg = JSON.parse(response); // Ignores pings\n\n      if (msg.type === \"ping\") {\n        return;\n      }\n\n      console.log(\"FROM RAILS: \", msg); // Renders any newly created messages onto the page\n\n      if (msg.message) {}\n    }; // When an error occurs through the websocket connection, this code is run printing the error message\n\n\n    socket.onerror = function (error) {\n      console.log('WebSocket Error: ' + error);\n    };\n  }, []);\n  const {\n    chatroom,\n    messages\n  } = userRequest;\n\n  const postMessage = event => {\n    // event.preventDefault()\n    let data = {\n      content: textValue,\n      chatroom_id: chatroom.id,\n      user_id: props.currentUser.id,\n      user_name: props.currentUser.username\n    };\n    fetch('http://localhost:3000/messages', {\n      method: 'Post',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(resp => resp.json()).then(data => {\n      setUserRequest({\n        messages: [...messages, data]\n      });\n    }).then(() => cleanScreen());\n  };\n\n  function cleanScreen() {\n    changeTextValue('');\n  }\n\n  function renderMessages() {\n    return messages.map((msg, i) => /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.flex,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: msg.user_name,\n      className: classes.chip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, \" \", msg.content, \" \")));\n  }\n\n  function keyPressed(event) {\n    if (event.key === \"Enter\") {\n      postMessage();\n    }\n  } // const messagesEndRef = React.createRef()\n  // function scrollToBottom() {\n  //     messagesEndRef.scrollIntoView({ behavior: \"smooth\" })\n  //   }\n  //   componentDidMount() {\n  //     scrollToBottom();\n  //   }\n  //   componentDidUpdate() {\n  //     scrollToBottom();\n  //   }\n  // console.log(messages[0]);\n\n\n  function renderParticipants() {\n    return props.participants.map(p => /*#__PURE__*/React.createElement(Avatar, {\n      alt: p.name,\n      src: p.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 44\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, \"Chat Room\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chatwindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, renderMessages()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField // id=\"standard-multiline-flexible\"\n  , {\n    label: \"Send a message\",\n    className: classes.chatbox,\n    value: textValue,\n    onChange: e => changeTextValue(e.target.value),\n    onKeyPress: keyPressed // multiline\n    // rowsMax={4}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: postMessage,\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, \"Send\"))), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, \"Participants\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.avatars,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, renderParticipants())));\n}","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatRoomTest.js"],"names":["React","useState","useEffect","Paper","Typography","makeStyles","List","Chip","Button","TextField","Avatar","useStyles","theme","root","margin","padding","spacing","flex","display","alignItems","chatwindow","width","height","overflow","chatbox","button","avatars","useMergeState","initialState","state","setState","setMergedState","newState","prevState","Object","assign","ChatRoomT","props","classes","userRequest","setUserRequest","chatroom","messages","textValue","changeTextValue","fetch","id","then","resp","json","data","socket","WebSocket","onopen","event","console","log","msg","command","identifier","JSON","stringify","channel","send","onclose","onmessage","response","parse","type","message","onerror","error","postMessage","content","chatroom_id","user_id","currentUser","user_name","username","method","headers","body","cleanScreen","renderMessages","map","i","chip","keyPressed","key","renderParticipants","participants","p","name","image","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Avatar from '@material-ui/core/Avatar';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: '50px',\n        padding: theme.spacing(3, 2)\n    },\n    flex: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    chatwindow: {\n        width: '100%',\n        height: '300px',\n        padding: '20px',\n        overflow: 'auto'\n\n    },\n    chatbox: {\n        width: '85%'\n    },\n    button: {\n        width: '15%'\n    },\n    avatars: {\n        display: 'flex',\n        '& > *': {\n          margin: theme.spacing(1),\n        },\n      },\n}));\n\nfunction useMergeState(initialState) {\n    const [state, setState] = useState(initialState);\n    const setMergedState = newState =>\n        setState(prevState => Object.assign({}, prevState, newState)\n        );\n    return [state, setMergedState];\n}\n\nexport default function ChatRoomT(props) {\n    const classes = useStyles();\n\n    const [userRequest, setUserRequest] = useMergeState({\n        chatroom: {},\n        messages: [],\n    });\n\n    const [textValue, changeTextValue] = React.useState('')\n\n    useEffect(() => {\n        fetch(`http://localhost:3000/chatrooms/${props.chatroom.id}`).then(resp => resp.json()).then(data => setUserRequest({ chatroom: data, messages: data.messages }))      //{changeChatroom(data) && changeMessages(data.messages)})\n\n\n        // Creates the new websocket connection\n        let socket = new WebSocket('ws://localhost:3000/cable');\n\n        // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n        socket.onopen = function (event) {\n            console.log('WebSocket is connected.');\n\n            const msg = {\n                command: 'subscribe',\n                identifier: JSON.stringify({\n                    id: 1,\n                    channel: 'ChatroomChannel'\n                }),\n            };\n\n            socket.send(JSON.stringify(msg));\n        };\n\n        // When the connection is closed, this code is run\n        socket.onclose = function (event) {\n            console.log('WebSocket is closed.');\n        };\n\n        // When a message is received through the websocket, this code is run\n        socket.onmessage = function (event) {\n            const response = event.data;\n            const msg = JSON.parse(response);\n\n            // Ignores pings\n            if (msg.type === \"ping\") {\n                return;\n            }\n\n            console.log(\"FROM RAILS: \", msg);\n\n            // Renders any newly created messages onto the page\n            if (msg.message) {\n\n            }\n\n        };\n\n        // When an error occurs through the websocket connection, this code is run printing the error message\n        socket.onerror = function (error) {\n            console.log('WebSocket Error: ' + error);\n        };\n\n    }, []);\n\n    const { chatroom, messages } = userRequest;\n\n    const postMessage = (event) => {\n        // event.preventDefault()\n        let data = { content: textValue, chatroom_id: chatroom.id, user_id: props.currentUser.id, user_name: props.currentUser.username }\n\n        fetch('http://localhost:3000/messages', {\n            method: 'Post',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n            .then(resp => resp.json())\n            .then(data => {\n                setUserRequest({ messages: [...messages, data] })\n            }).then(() => cleanScreen())\n    }\n\n\n    function cleanScreen() {\n        changeTextValue('')\n    }\n\n    function renderMessages() {\n        return messages.map((msg, i) => (\n            <div className={classes.flex} key={i}>\n                <Chip label={msg.user_name} className={classes.chip} />\n                <Typography variant='p'> {msg.content} </Typography>\n            </div>\n        ))\n    }\n\n    function keyPressed(event) {\n        if (event.key === \"Enter\") {\n            postMessage()\n        }\n    }\n    // const messagesEndRef = React.createRef()\n    // function scrollToBottom() {\n    //     messagesEndRef.scrollIntoView({ behavior: \"smooth\" })\n    //   }\n\n    //   componentDidMount() {\n    //     scrollToBottom();\n    //   }\n\n    //   componentDidUpdate() {\n    //     scrollToBottom();\n    //   }\n\n    // console.log(messages[0]);\n\n    function renderParticipants(){\n        return props.participants.map(p => <Avatar alt={p.name} src={p.image} />)\n    }\n\n    return (\n        <div>\n            <Paper className={classes.root}>\n                <Typography variant='h5' component='h5'>\n                    Chat Room\n                </Typography>\n\n                <div className={classes.flex}>\n                    <div className={classes.chatwindow}>\n                        <List>\n                            {renderMessages()}\n                        </List>\n                    </div>\n                    {/* <div style={{ float: \"left\", clear: \"both\" }}\n                        ref={(el) => { messagesEndRef = el; }}>\n                    </div> */}\n                </div>\n\n                <div className={classes.flex}>\n                    <TextField\n                        // id=\"standard-multiline-flexible\"\n                        label=\"Send a message\"\n                        className={classes.chatbox}\n                        value={textValue}\n                        onChange={e => changeTextValue(e.target.value)}\n                        onKeyPress={keyPressed}\n                    // multiline\n                    // rowsMax={4}\n                    />\n                    <Button onClick={postMessage} variant=\"contained\" color=\"primary\">\n                        Send\n                    </Button>\n                </div>\n\n            </Paper>\n\n            <Paper className={classes.root}>\n                <Typography variant='h4' component='h4'>\n                    Participants\n                </Typography>\n                <div className={classes.avatars}> \n                    {renderParticipants()}\n                </div>\n            </Paper>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}