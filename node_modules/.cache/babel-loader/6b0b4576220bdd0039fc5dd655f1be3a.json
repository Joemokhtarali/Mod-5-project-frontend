{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatRoomTest.js\";\nimport React, { useState, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip'; // import FaceIcon from '@material-ui/icons/Face';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '50px',\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: 'flex',\n    alignItem: 'center'\n  },\n  chatwindow: {\n    width: '100%',\n    height: '300px',\n    padding: '20px'\n  },\n  chatbox: {\n    width: '85%'\n  },\n  button: {\n    width: '15%'\n  }\n}));\n\nfunction useMergeState(initialState) {\n  const [state, setState] = useState(initialState);\n\n  const setMergedState = newState => setState(prevState => Object.assign({}, prevState, newState));\n\n  return [state, setMergedState];\n}\n\nexport default function ChatRoomT(props) {\n  const classes = useStyles();\n  const [userRequest, setUserRequest] = useMergeState({\n    chatroom: [],\n    messages: []\n  });\n  const [textValue, changeTextValue] = React.useState('');\n  useEffect(() => {\n    fetch(`http://localhost:3000/chatrooms/${props.chatroom.id}`).then(resp => resp.json()).then(data => setUserRequest({\n      chatroom: data,\n      messages: data.messages\n    })); //{changeChatroom(data) && changeMessages(data.messages)})\n    // Creates the new websocket connection\n\n    let socket = new WebSocket('ws://localhost:3000/cable'); // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n\n    socket.onopen = function (event) {\n      console.log('WebSocket is connected.');\n      const msg = {\n        command: 'subscribe',\n        identifier: JSON.stringify({\n          id: 1,\n          channel: 'ChatroomChannel'\n        })\n      };\n      socket.send(JSON.stringify(msg));\n    }; // When the connection is closed, this code is run\n\n\n    socket.onclose = function (event) {\n      console.log('WebSocket is closed.');\n    }; // When a message is received through the websocket, this code is run\n\n\n    socket.onmessage = function (event) {\n      const response = event.data;\n      const msg = JSON.parse(response); // Ignores pings\n\n      if (msg.type === \"ping\") {\n        return;\n      }\n\n      console.log(\"FROM RAILS: \", msg); // Renders any newly created messages onto the page\n\n      if (msg.message) {}\n    }; // When an error occurs through the websocket connection, this code is run printing the error message\n\n\n    socket.onerror = function (error) {\n      console.log('WebSocket Error: ' + error);\n    };\n  }, []);\n  const {\n    chatroom,\n    messages\n  } = userRequest;\n\n  const postMessage = event => {\n    event.preventDefault();\n    let data = {\n      content: textValue,\n      chatroom_id: chatroom.id,\n      user_id: props.currentUser.id\n    };\n    console.log('message', data);\n    fetch('http://localhost:3000/messages', {\n      method: 'Post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      setUserRequest({\n        messages: [...messages, response]\n      });\n    });\n  };\n\n  console.log(messages[0].user);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"Chat Room\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chatwindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  }, messages.map((msg, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: msg.flex,\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    label: msg.user_id,\n    className: classes.chip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 41\n    }\n  }, \" \", msg.content, \" \")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-multiline-flexible\",\n    label: \"Send a message\",\n    className: classes.chatbox,\n    value: textValue,\n    onChange: e => changeTextValue(e.target.value) // multiline\n    // rowsMax={4}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: postMessage,\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, \"Send\"))));\n}","map":{"version":3,"sources":["/Users/flatironschool/Desktop/Mod 5 Project/Mod-5-project-frontend/src/components/chatRoomTest.js"],"names":["React","useState","useEffect","Paper","Typography","makeStyles","List","ListItem","ListItemText","Chip","Button","TextField","useStyles","theme","root","margin","padding","spacing","flex","display","alignItem","chatwindow","width","height","chatbox","button","useMergeState","initialState","state","setState","setMergedState","newState","prevState","Object","assign","ChatRoomT","props","classes","userRequest","setUserRequest","chatroom","messages","textValue","changeTextValue","fetch","id","then","resp","json","data","socket","WebSocket","onopen","event","console","log","msg","command","identifier","JSON","stringify","channel","send","onclose","onmessage","response","parse","type","message","onerror","error","postMessage","preventDefault","content","chatroom_id","user_id","currentUser","method","headers","body","user","map","i","chip","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip';\n// import FaceIcon from '@material-ui/icons/Face';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: '50px',\n        padding: theme.spacing(3, 2)\n    },\n    flex: {\n        display: 'flex',\n        alignItem: 'center'\n    },\n    chatwindow: {\n        width: '100%',\n        height: '300px',\n        padding: '20px'\n    },\n    chatbox: {\n        width: '85%'\n    },\n    button: {\n        width: '15%'\n    },\n}));\n\nfunction useMergeState(initialState) {\n    const [state, setState] = useState(initialState);\n    const setMergedState = newState => \n      setState(prevState => Object.assign({}, prevState, newState)\n    );\n    return [state, setMergedState];\n  }\n\nexport default function ChatRoomT(props) {\n    const classes = useStyles();\n\n    const [userRequest, setUserRequest] = useMergeState({\n        chatroom: [],\n        messages: [],\n      });\n\n    const [textValue, changeTextValue] = React.useState('')\n\n    useEffect(() => {\n        fetch(`http://localhost:3000/chatrooms/${props.chatroom.id}`).then(resp => resp.json()).then(data => setUserRequest({chatroom: data, messages: data.messages}))      //{changeChatroom(data) && changeMessages(data.messages)})\n        \n\n        // Creates the new websocket connection\n        let socket = new WebSocket('ws://localhost:3000/cable');\n\n        // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel\n        socket.onopen = function (event) {\n            console.log('WebSocket is connected.');\n\n            const msg = {\n                command: 'subscribe',\n                identifier: JSON.stringify({\n                    id: 1,\n                    channel: 'ChatroomChannel'\n                }),\n            };\n\n            socket.send(JSON.stringify(msg));\n        };\n\n        // When the connection is closed, this code is run\n        socket.onclose = function (event) {\n            console.log('WebSocket is closed.');\n        };\n\n        // When a message is received through the websocket, this code is run\n        socket.onmessage = function (event) {\n            const response = event.data;\n            const msg = JSON.parse(response);\n\n            // Ignores pings\n            if (msg.type === \"ping\") {\n                return;\n            }\n\n            console.log(\"FROM RAILS: \", msg);\n\n            // Renders any newly created messages onto the page\n            if (msg.message) {\n\n            }\n\n        };\n\n        // When an error occurs through the websocket connection, this code is run printing the error message\n        socket.onerror = function (error) {\n            console.log('WebSocket Error: ' + error);\n        };\n\n    }, []);\n\n    const { chatroom, messages } = userRequest;\n\n    const postMessage = (event) => {\n        event.preventDefault()\n        let data = { content: textValue, chatroom_id: chatroom.id, user_id: props.currentUser.id }\n        console.log('message', data);\n\n        fetch('http://localhost:3000/messages', {\n            method: 'Post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(response => {\n            setUserRequest({messages: [...messages, response]})\n        })\n    }\n\nconsole.log(messages[0].user);\n\n    return (\n        <div>\n            <Paper className={classes.root}>\n                <Typography variant='h5' component='h5'>\n                    Chat Room\n                </Typography>\n                {/* <Typography component='p'>\n                    PP\n                </Typography> */}\n                <div className={classes.flex}>\n                    <div className={classes.chatwindow}>\n                        <List>\n                            {\n                                messages.map((msg, i) => (\n                                    <div className={msg.flex} key={i}>\n                                        <Chip label={msg.user_id} className={classes.chip} />\n                                        <Typography variant='p'> {msg.content} </Typography>\n                                    </div>\n                                ))\n                            }\n\n                        </List>\n                    </div>\n                </div>\n                <div className={classes.flex}>\n                    <TextField\n                        id=\"standard-multiline-flexible\"\n                        label=\"Send a message\"\n                        className={classes.chatbox}\n                        value={textValue}\n                        onChange={e => changeTextValue(e.target.value)}\n                    // multiline\n                    // rowsMax={4}\n                    />\n\n                    <Button onClick={postMessage} variant=\"contained\" color=\"primary\">\n                        Send\n                    </Button>\n\n                    {/* <div className={classes.chatbox}>\n\n                    </div>\n                    <div className={classes.button}>\n                       \n                    </div> */}\n                </div>\n            </Paper>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}